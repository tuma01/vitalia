/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createMunicipio } from '../fn/municipio/create-municipio';
import { CreateMunicipio$Params } from '../fn/municipio/create-municipio';
import { deleteMunicipio } from '../fn/municipio/delete-municipio';
import { DeleteMunicipio$Params } from '../fn/municipio/delete-municipio';
import { getAllMunicipios } from '../fn/municipio/get-all-municipios';
import { GetAllMunicipios$Params } from '../fn/municipio/get-all-municipios';
import { getMunicipioById } from '../fn/municipio/get-municipio-by-id';
import { GetMunicipioById$Params } from '../fn/municipio/get-municipio-by-id';
import { getPaginatedMunicipios } from '../fn/municipio/get-paginated-municipios';
import { GetPaginatedMunicipios$Params } from '../fn/municipio/get-paginated-municipios';
import { Municipio } from '../models/municipio';
import { PageResponseDtoMunicipio } from '../models/page-response-dto-municipio';
import { updateMunicipio } from '../fn/municipio/update-municipio';
import { UpdateMunicipio$Params } from '../fn/municipio/update-municipio';


/**
 * REST API para gestionar detalles del municipio: crear, actualizar, obtener y eliminar.
 */
@Injectable({ providedIn: 'root' })
export class MunicipioService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getMunicipioById()` */
  static readonly GetMunicipioByIdPath = '/municipios/{id}';

  /**
   * Obtener una municipio por ID.
   *
   * Devuelve un objeto Municipio por ID especificado.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMunicipioById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMunicipioById$Response(params: GetMunicipioById$Params, context?: HttpContext): Observable<StrictHttpResponse<Municipio>> {
    return getMunicipioById(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener una municipio por ID.
   *
   * Devuelve un objeto Municipio por ID especificado.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMunicipioById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMunicipioById(params: GetMunicipioById$Params, context?: HttpContext): Observable<Municipio> {
    return this.getMunicipioById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Municipio>): Municipio => r.body)
    );
  }

  /** Path part for operation `updateMunicipio()` */
  static readonly UpdateMunicipioPath = '/municipios/{id}';

  /**
   * Actualizar un municipio por ID.
   *
   * Actualiza un municipio existente usando su ID y los datos proporcionados.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMunicipio()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMunicipio$Response(params: UpdateMunicipio$Params, context?: HttpContext): Observable<StrictHttpResponse<Municipio>> {
    return updateMunicipio(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar un municipio por ID.
   *
   * Actualiza un municipio existente usando su ID y los datos proporcionados.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMunicipio$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMunicipio(params: UpdateMunicipio$Params, context?: HttpContext): Observable<Municipio> {
    return this.updateMunicipio$Response(params, context).pipe(
      map((r: StrictHttpResponse<Municipio>): Municipio => r.body)
    );
  }

  /** Path part for operation `deleteMunicipio()` */
  static readonly DeleteMunicipioPath = '/municipios/{id}';

  /**
   * Eliminar un municipio por ID.
   *
   * Elimina un municipio existente usando su ID.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMunicipio()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMunicipio$Response(params: DeleteMunicipio$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteMunicipio(this.http, this.rootUrl, params, context);
  }

  /**
   * Eliminar un municipio por ID.
   *
   * Elimina un municipio existente usando su ID.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMunicipio$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMunicipio(params: DeleteMunicipio$Params, context?: HttpContext): Observable<void> {
    return this.deleteMunicipio$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getPaginatedMunicipios()` */
  static readonly GetPaginatedMunicipiosPath = '/municipios';

  /**
   * Obtener municipios con paginación.
   *
   * Devuelve una lista de municipios paginada.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPaginatedMunicipios()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaginatedMunicipios$Response(params?: GetPaginatedMunicipios$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseDtoMunicipio>> {
    return getPaginatedMunicipios(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener municipios con paginación.
   *
   * Devuelve una lista de municipios paginada.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPaginatedMunicipios$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaginatedMunicipios(params?: GetPaginatedMunicipios$Params, context?: HttpContext): Observable<PageResponseDtoMunicipio> {
    return this.getPaginatedMunicipios$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseDtoMunicipio>): PageResponseDtoMunicipio => r.body)
    );
  }

  /** Path part for operation `createMunicipio()` */
  static readonly CreateMunicipioPath = '/municipios';

  /**
   * Crear un municipio.
   *
   * Crea un nuevo municipio usando los datos proporcionados en el cuerpo de la solicitud.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createMunicipio()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMunicipio$Response(params: CreateMunicipio$Params, context?: HttpContext): Observable<StrictHttpResponse<Municipio>> {
    return createMunicipio(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear un municipio.
   *
   * Crea un nuevo municipio usando los datos proporcionados en el cuerpo de la solicitud.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createMunicipio$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createMunicipio(params: CreateMunicipio$Params, context?: HttpContext): Observable<Municipio> {
    return this.createMunicipio$Response(params, context).pipe(
      map((r: StrictHttpResponse<Municipio>): Municipio => r.body)
    );
  }

  /** Path part for operation `getAllMunicipios()` */
  static readonly GetAllMunicipiosPath = '/municipios/all';

  /**
   * Obtener todos los municipios.
   *
   * Devuelve la lista completa de municipios.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllMunicipios()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMunicipios$Response(params?: GetAllMunicipios$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Municipio>>> {
    return getAllMunicipios(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener todos los municipios.
   *
   * Devuelve la lista completa de municipios.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllMunicipios$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllMunicipios(params?: GetAllMunicipios$Params, context?: HttpContext): Observable<Array<Municipio>> {
    return this.getAllMunicipios$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Municipio>>): Array<Municipio> => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createProvincia } from '../fn/provincia/create-provincia';
import { CreateProvincia$Params } from '../fn/provincia/create-provincia';
import { deleteProvincia } from '../fn/provincia/delete-provincia';
import { DeleteProvincia$Params } from '../fn/provincia/delete-provincia';
import { getAllProvincias } from '../fn/provincia/get-all-provincias';
import { GetAllProvincias$Params } from '../fn/provincia/get-all-provincias';
import { getPaginatedProvincias } from '../fn/provincia/get-paginated-provincias';
import { GetPaginatedProvincias$Params } from '../fn/provincia/get-paginated-provincias';
import { getProvinciaById } from '../fn/provincia/get-provincia-by-id';
import { GetProvinciaById$Params } from '../fn/provincia/get-provincia-by-id';
import { PageResponseDtoProvincia } from '../models/page-response-dto-provincia';
import { Provincia } from '../models/provincia';
import { updateProvincia } from '../fn/provincia/update-provincia';
import { UpdateProvincia$Params } from '../fn/provincia/update-provincia';


/**
 * REST API para gestionar detalles de provincias: crear, actualizar, obtener y eliminar.
 */
@Injectable({ providedIn: 'root' })
export class ProvinciaService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getProvinciaById()` */
  static readonly GetProvinciaByIdPath = '/provincias/{id}';

  /**
   * Obtener una provincia por ID.
   *
   * Devuelve un objeto Provincia por ID especificado.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProvinciaById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProvinciaById$Response(params: GetProvinciaById$Params, context?: HttpContext): Observable<StrictHttpResponse<Provincia>> {
    return getProvinciaById(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener una provincia por ID.
   *
   * Devuelve un objeto Provincia por ID especificado.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProvinciaById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProvinciaById(params: GetProvinciaById$Params, context?: HttpContext): Observable<Provincia> {
    return this.getProvinciaById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Provincia>): Provincia => r.body)
    );
  }

  /** Path part for operation `updateProvincia()` */
  static readonly UpdateProvinciaPath = '/provincias/{id}';

  /**
   * Actualizar una provincia por ID.
   *
   * Actualiza una provincia existente usando su ID y los datos proporcionados.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateProvincia()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProvincia$Response(params: UpdateProvincia$Params, context?: HttpContext): Observable<StrictHttpResponse<Provincia>> {
    return updateProvincia(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar una provincia por ID.
   *
   * Actualiza una provincia existente usando su ID y los datos proporcionados.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateProvincia$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateProvincia(params: UpdateProvincia$Params, context?: HttpContext): Observable<Provincia> {
    return this.updateProvincia$Response(params, context).pipe(
      map((r: StrictHttpResponse<Provincia>): Provincia => r.body)
    );
  }

  /** Path part for operation `deleteProvincia()` */
  static readonly DeleteProvinciaPath = '/provincias/{id}';

  /**
   * Eliminar una provincia por ID.
   *
   * Elimina una provincia existente usando su ID.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteProvincia()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProvincia$Response(params: DeleteProvincia$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteProvincia(this.http, this.rootUrl, params, context);
  }

  /**
   * Eliminar una provincia por ID.
   *
   * Elimina una provincia existente usando su ID.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteProvincia$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteProvincia(params: DeleteProvincia$Params, context?: HttpContext): Observable<void> {
    return this.deleteProvincia$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getPaginatedProvincias()` */
  static readonly GetPaginatedProvinciasPath = '/provincias';

  /**
   * Obtener provincias con paginación.
   *
   * Devuelve una lista de provincias paginada.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPaginatedProvincias()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaginatedProvincias$Response(params?: GetPaginatedProvincias$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseDtoProvincia>> {
    return getPaginatedProvincias(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener provincias con paginación.
   *
   * Devuelve una lista de provincias paginada.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPaginatedProvincias$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaginatedProvincias(params?: GetPaginatedProvincias$Params, context?: HttpContext): Observable<PageResponseDtoProvincia> {
    return this.getPaginatedProvincias$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseDtoProvincia>): PageResponseDtoProvincia => r.body)
    );
  }

  /** Path part for operation `createProvincia()` */
  static readonly CreateProvinciaPath = '/provincias';

  /**
   * Crear una provincia.
   *
   * Crea una nueva provincia usando los datos proporcionados en el cuerpo de la solicitud.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createProvincia()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createProvincia$Response(params: CreateProvincia$Params, context?: HttpContext): Observable<StrictHttpResponse<Provincia>> {
    return createProvincia(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear una provincia.
   *
   * Crea una nueva provincia usando los datos proporcionados en el cuerpo de la solicitud.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createProvincia$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createProvincia(params: CreateProvincia$Params, context?: HttpContext): Observable<Provincia> {
    return this.createProvincia$Response(params, context).pipe(
      map((r: StrictHttpResponse<Provincia>): Provincia => r.body)
    );
  }

  /** Path part for operation `getAllProvincias()` */
  static readonly GetAllProvinciasPath = '/provincias/all';

  /**
   * Obtener todos las provincias.
   *
   * Devuelve la lista completa de provincias.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllProvincias()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProvincias$Response(params?: GetAllProvincias$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Provincia>>> {
    return getAllProvincias(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener todos las provincias.
   *
   * Devuelve la lista completa de provincias.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllProvincias$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllProvincias(params?: GetAllProvincias$Params, context?: HttpContext): Observable<Array<Provincia>> {
    return this.getAllProvincias$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Provincia>>): Array<Provincia> => r.body)
    );
  }

}

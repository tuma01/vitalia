/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createDoctorProfessionSpeciality } from '../fn/doctor-profession-speciality/create-doctor-profession-speciality';
import { CreateDoctorProfessionSpeciality$Params } from '../fn/doctor-profession-speciality/create-doctor-profession-speciality';
import { deleteDoctorProfessionSpeciality } from '../fn/doctor-profession-speciality/delete-doctor-profession-speciality';
import { DeleteDoctorProfessionSpeciality$Params } from '../fn/doctor-profession-speciality/delete-doctor-profession-speciality';
import { DoctorProfessionSpeciality } from '../models/doctor-profession-speciality';
import { getAllDoctorProfessionSpecialities } from '../fn/doctor-profession-speciality/get-all-doctor-profession-specialities';
import { GetAllDoctorProfessionSpecialities$Params } from '../fn/doctor-profession-speciality/get-all-doctor-profession-specialities';
import { getDoctorProfessionSpecialityById } from '../fn/doctor-profession-speciality/get-doctor-profession-speciality-by-id';
import { GetDoctorProfessionSpecialityById$Params } from '../fn/doctor-profession-speciality/get-doctor-profession-speciality-by-id';
import { getPaginatedDoctorProfessionSpecialities } from '../fn/doctor-profession-speciality/get-paginated-doctor-profession-specialities';
import { GetPaginatedDoctorProfessionSpecialities$Params } from '../fn/doctor-profession-speciality/get-paginated-doctor-profession-specialities';
import { PageResponseDtoDoctorProfessionSpeciality } from '../models/page-response-dto-doctor-profession-speciality';
import { updateDoctorProfessionSpeciality } from '../fn/doctor-profession-speciality/update-doctor-profession-speciality';
import { UpdateDoctorProfessionSpeciality$Params } from '../fn/doctor-profession-speciality/update-doctor-profession-speciality';


/**
 * Rest API SIIM APP to CREATE, UPDATE, FETCH and DELETE DoctorProfessionSpeciality details
 */
@Injectable({ providedIn: 'root' })
export class DoctorProfessionSpecialityService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getDoctorProfessionSpecialityById()` */
  static readonly GetDoctorProfessionSpecialityByIdPath = '/doctorprofessionspecialities/{id}';

  /**
   * Obtener un doctorProfessionSpeciality por ID.
   *
   * Devuelve un objeto DoctorProfessionSpeciality por ID especificado.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDoctorProfessionSpecialityById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDoctorProfessionSpecialityById$Response(params: GetDoctorProfessionSpecialityById$Params, context?: HttpContext): Observable<StrictHttpResponse<DoctorProfessionSpeciality>> {
    return getDoctorProfessionSpecialityById(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener un doctorProfessionSpeciality por ID.
   *
   * Devuelve un objeto DoctorProfessionSpeciality por ID especificado.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDoctorProfessionSpecialityById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDoctorProfessionSpecialityById(params: GetDoctorProfessionSpecialityById$Params, context?: HttpContext): Observable<DoctorProfessionSpeciality> {
    return this.getDoctorProfessionSpecialityById$Response(params, context).pipe(
      map((r: StrictHttpResponse<DoctorProfessionSpeciality>): DoctorProfessionSpeciality => r.body)
    );
  }

  /** Path part for operation `updateDoctorProfessionSpeciality()` */
  static readonly UpdateDoctorProfessionSpecialityPath = '/doctorprofessionspecialities/{id}';

  /**
   * Actualizar un doctorProfessionSpeciality por ID.
   *
   * Actualiza un doctorProfessionSpeciality existente usando su ID y los datos proporcionados.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateDoctorProfessionSpeciality()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDoctorProfessionSpeciality$Response(params: UpdateDoctorProfessionSpeciality$Params, context?: HttpContext): Observable<StrictHttpResponse<DoctorProfessionSpeciality>> {
    return updateDoctorProfessionSpeciality(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar un doctorProfessionSpeciality por ID.
   *
   * Actualiza un doctorProfessionSpeciality existente usando su ID y los datos proporcionados.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateDoctorProfessionSpeciality$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDoctorProfessionSpeciality(params: UpdateDoctorProfessionSpeciality$Params, context?: HttpContext): Observable<DoctorProfessionSpeciality> {
    return this.updateDoctorProfessionSpeciality$Response(params, context).pipe(
      map((r: StrictHttpResponse<DoctorProfessionSpeciality>): DoctorProfessionSpeciality => r.body)
    );
  }

  /** Path part for operation `deleteDoctorProfessionSpeciality()` */
  static readonly DeleteDoctorProfessionSpecialityPath = '/doctorprofessionspecialities/{id}';

  /**
   * Eliminar un doctorProfessionSpeciality por ID.
   *
   * Elimina un doctorProfessionSpeciality existente usando su ID.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteDoctorProfessionSpeciality()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDoctorProfessionSpeciality$Response(params: DeleteDoctorProfessionSpeciality$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteDoctorProfessionSpeciality(this.http, this.rootUrl, params, context);
  }

  /**
   * Eliminar un doctorProfessionSpeciality por ID.
   *
   * Elimina un doctorProfessionSpeciality existente usando su ID.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteDoctorProfessionSpeciality$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDoctorProfessionSpeciality(params: DeleteDoctorProfessionSpeciality$Params, context?: HttpContext): Observable<void> {
    return this.deleteDoctorProfessionSpeciality$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getPaginatedDoctorProfessionSpecialities()` */
  static readonly GetPaginatedDoctorProfessionSpecialitiesPath = '/doctorprofessionspecialities';

  /**
   * Obtener doctorProfessionSpecialities con paginación.
   *
   * Devuelve una lista de doctorProfessionSpecialities paginada.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPaginatedDoctorProfessionSpecialities()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaginatedDoctorProfessionSpecialities$Response(params?: GetPaginatedDoctorProfessionSpecialities$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseDtoDoctorProfessionSpeciality>> {
    return getPaginatedDoctorProfessionSpecialities(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener doctorProfessionSpecialities con paginación.
   *
   * Devuelve una lista de doctorProfessionSpecialities paginada.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPaginatedDoctorProfessionSpecialities$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaginatedDoctorProfessionSpecialities(params?: GetPaginatedDoctorProfessionSpecialities$Params, context?: HttpContext): Observable<PageResponseDtoDoctorProfessionSpeciality> {
    return this.getPaginatedDoctorProfessionSpecialities$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseDtoDoctorProfessionSpeciality>): PageResponseDtoDoctorProfessionSpeciality => r.body)
    );
  }

  /** Path part for operation `createDoctorProfessionSpeciality()` */
  static readonly CreateDoctorProfessionSpecialityPath = '/doctorprofessionspecialities';

  /**
   * Crear un doctorProfessionSpeciality.
   *
   * Crea un nuevo doctorProfessionSpeciality usando los datos proporcionados en el cuerpo de la solicitud.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createDoctorProfessionSpeciality()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createDoctorProfessionSpeciality$Response(params: CreateDoctorProfessionSpeciality$Params, context?: HttpContext): Observable<StrictHttpResponse<DoctorProfessionSpeciality>> {
    return createDoctorProfessionSpeciality(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear un doctorProfessionSpeciality.
   *
   * Crea un nuevo doctorProfessionSpeciality usando los datos proporcionados en el cuerpo de la solicitud.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createDoctorProfessionSpeciality$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createDoctorProfessionSpeciality(params: CreateDoctorProfessionSpeciality$Params, context?: HttpContext): Observable<DoctorProfessionSpeciality> {
    return this.createDoctorProfessionSpeciality$Response(params, context).pipe(
      map((r: StrictHttpResponse<DoctorProfessionSpeciality>): DoctorProfessionSpeciality => r.body)
    );
  }

  /** Path part for operation `getAllDoctorProfessionSpecialities()` */
  static readonly GetAllDoctorProfessionSpecialitiesPath = '/doctorprofessionspecialities/all';

  /**
   * Obtener todos los doctorProfessionSpecialities.
   *
   * Devuelve la lista completa de doctorProfessionSpecialities.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllDoctorProfessionSpecialities()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDoctorProfessionSpecialities$Response(params?: GetAllDoctorProfessionSpecialities$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DoctorProfessionSpeciality>>> {
    return getAllDoctorProfessionSpecialities(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener todos los doctorProfessionSpecialities.
   *
   * Devuelve la lista completa de doctorProfessionSpecialities.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllDoctorProfessionSpecialities$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDoctorProfessionSpecialities(params?: GetAllDoctorProfessionSpecialities$Params, context?: HttpContext): Observable<Array<DoctorProfessionSpeciality>> {
    return this.getAllDoctorProfessionSpecialities$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DoctorProfessionSpeciality>>): Array<DoctorProfessionSpeciality> => r.body)
    );
  }

}

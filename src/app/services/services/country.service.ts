/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Country } from '../models/country';
import { createCountry } from '../fn/country/create-country';
import { CreateCountry$Params } from '../fn/country/create-country';
import { deleteCountry } from '../fn/country/delete-country';
import { DeleteCountry$Params } from '../fn/country/delete-country';
import { getAllCountries } from '../fn/country/get-all-countries';
import { GetAllCountries$Params } from '../fn/country/get-all-countries';
import { getCountryById } from '../fn/country/get-country-by-id';
import { GetCountryById$Params } from '../fn/country/get-country-by-id';
import { getPaginatedCountries } from '../fn/country/get-paginated-countries';
import { GetPaginatedCountries$Params } from '../fn/country/get-paginated-countries';
import { PageResponseDtoCountry } from '../models/page-response-dto-country';
import { updateCountry } from '../fn/country/update-country';
import { UpdateCountry$Params } from '../fn/country/update-country';


/**
 * REST API para gestionar detalles de países: crear, actualizar, obtener y eliminar.
 */
@Injectable({ providedIn: 'root' })
export class CountryService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getCountryById()` */
  static readonly GetCountryByIdPath = '/countries/{id}';

  /**
   * Obtener un país por ID.
   *
   * Devuelve un objeto Country por ID especificado.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCountryById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCountryById$Response(params: GetCountryById$Params, context?: HttpContext): Observable<StrictHttpResponse<Country>> {
    return getCountryById(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener un país por ID.
   *
   * Devuelve un objeto Country por ID especificado.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCountryById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCountryById(params: GetCountryById$Params, context?: HttpContext): Observable<Country> {
    return this.getCountryById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Country>): Country => r.body)
    );
  }

  /** Path part for operation `updateCountry()` */
  static readonly UpdateCountryPath = '/countries/{id}';

  /**
   * Actualizar un país por ID.
   *
   * Actualiza un país existente usando su ID y los datos proporcionados.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateCountry()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCountry$Response(params: UpdateCountry$Params, context?: HttpContext): Observable<StrictHttpResponse<Country>> {
    return updateCountry(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar un país por ID.
   *
   * Actualiza un país existente usando su ID y los datos proporcionados.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateCountry$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateCountry(params: UpdateCountry$Params, context?: HttpContext): Observable<Country> {
    return this.updateCountry$Response(params, context).pipe(
      map((r: StrictHttpResponse<Country>): Country => r.body)
    );
  }

  /** Path part for operation `deleteCountry()` */
  static readonly DeleteCountryPath = '/countries/{id}';

  /**
   * Eliminar un país por ID.
   *
   * Elimina un país existente usando su ID.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteCountry()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCountry$Response(params: DeleteCountry$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteCountry(this.http, this.rootUrl, params, context);
  }

  /**
   * Eliminar un país por ID.
   *
   * Elimina un país existente usando su ID.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteCountry$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteCountry(params: DeleteCountry$Params, context?: HttpContext): Observable<void> {
    return this.deleteCountry$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getPaginatedCountries()` */
  static readonly GetPaginatedCountriesPath = '/countries';

  /**
   * Obtener países con paginación.
   *
   * Devuelve una lista de países paginada.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPaginatedCountries()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaginatedCountries$Response(params?: GetPaginatedCountries$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseDtoCountry>> {
    return getPaginatedCountries(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener países con paginación.
   *
   * Devuelve una lista de países paginada.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPaginatedCountries$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaginatedCountries(params?: GetPaginatedCountries$Params, context?: HttpContext): Observable<PageResponseDtoCountry> {
    return this.getPaginatedCountries$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseDtoCountry>): PageResponseDtoCountry => r.body)
    );
  }

  /** Path part for operation `createCountry()` */
  static readonly CreateCountryPath = '/countries';

  /**
   * Crear un país.
   *
   * Crea un nuevo país usando los datos proporcionados en el cuerpo de la solicitud.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createCountry()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCountry$Response(params: CreateCountry$Params, context?: HttpContext): Observable<StrictHttpResponse<Country>> {
    return createCountry(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear un país.
   *
   * Crea un nuevo país usando los datos proporcionados en el cuerpo de la solicitud.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createCountry$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createCountry(params: CreateCountry$Params, context?: HttpContext): Observable<Country> {
    return this.createCountry$Response(params, context).pipe(
      map((r: StrictHttpResponse<Country>): Country => r.body)
    );
  }

  /** Path part for operation `getAllCountries()` */
  static readonly GetAllCountriesPath = '/countries/all';

  /**
   * Obtener todos los países.
   *
   * Devuelve la lista completa de países.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllCountries()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCountries$Response(params?: GetAllCountries$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Country>>> {
    return getAllCountries(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener todos los países.
   *
   * Devuelve la lista completa de países.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllCountries$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllCountries(params?: GetAllCountries$Params, context?: HttpContext): Observable<Array<Country>> {
    return this.getAllCountries$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Country>>): Array<Country> => r.body)
    );
  }

}

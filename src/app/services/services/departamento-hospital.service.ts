/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createDepartamentoHospital } from '../fn/departamento-hospital/create-departamento-hospital';
import { CreateDepartamentoHospital$Params } from '../fn/departamento-hospital/create-departamento-hospital';
import { deleteDepartamentoHospital } from '../fn/departamento-hospital/delete-departamento-hospital';
import { DeleteDepartamentoHospital$Params } from '../fn/departamento-hospital/delete-departamento-hospital';
import { DepartamentoHospital } from '../models/departamento-hospital';
import { getAllDepartamentoHospital } from '../fn/departamento-hospital/get-all-departamento-hospital';
import { GetAllDepartamentoHospital$Params } from '../fn/departamento-hospital/get-all-departamento-hospital';
import { getAllPaginatedDepartamentoHospital } from '../fn/departamento-hospital/get-all-paginated-departamento-hospital';
import { GetAllPaginatedDepartamentoHospital$Params } from '../fn/departamento-hospital/get-all-paginated-departamento-hospital';
import { getDepartamentoHospitalById } from '../fn/departamento-hospital/get-departamento-hospital-by-id';
import { GetDepartamentoHospitalById$Params } from '../fn/departamento-hospital/get-departamento-hospital-by-id';
import { PageResponseDtoDepartamentoHospital } from '../models/page-response-dto-departamento-hospital';
import { updateDepartamentoHospital } from '../fn/departamento-hospital/update-departamento-hospital';
import { UpdateDepartamentoHospital$Params } from '../fn/departamento-hospital/update-departamento-hospital';


/**
 * Rest API Vitalia APP to CREATE, UPDATE, FETCH and DELETE DepartamentoHospital details
 */
@Injectable({ providedIn: 'root' })
export class DepartamentoHospitalService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getDepartamentoHospitalById()` */
  static readonly GetDepartamentoHospitalByIdPath = '/departamentohospitales/{id}';

  /**
   * Obtener un departamentoHospital por ID.
   *
   * Devuelve un objeto DepartamentoHospital por ID especificado.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDepartamentoHospitalById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDepartamentoHospitalById$Response(params: GetDepartamentoHospitalById$Params, context?: HttpContext): Observable<StrictHttpResponse<DepartamentoHospital>> {
    return getDepartamentoHospitalById(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener un departamentoHospital por ID.
   *
   * Devuelve un objeto DepartamentoHospital por ID especificado.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDepartamentoHospitalById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDepartamentoHospitalById(params: GetDepartamentoHospitalById$Params, context?: HttpContext): Observable<DepartamentoHospital> {
    return this.getDepartamentoHospitalById$Response(params, context).pipe(
      map((r: StrictHttpResponse<DepartamentoHospital>): DepartamentoHospital => r.body)
    );
  }

  /** Path part for operation `updateDepartamentoHospital()` */
  static readonly UpdateDepartamentoHospitalPath = '/departamentohospitales/{id}';

  /**
   * Actualizar un departamentoHospital por ID.
   *
   * Actualiza un departamentoHospital existente usando su ID y los datos proporcionados.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateDepartamentoHospital()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDepartamentoHospital$Response(params: UpdateDepartamentoHospital$Params, context?: HttpContext): Observable<StrictHttpResponse<DepartamentoHospital>> {
    return updateDepartamentoHospital(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar un departamentoHospital por ID.
   *
   * Actualiza un departamentoHospital existente usando su ID y los datos proporcionados.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateDepartamentoHospital$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDepartamentoHospital(params: UpdateDepartamentoHospital$Params, context?: HttpContext): Observable<DepartamentoHospital> {
    return this.updateDepartamentoHospital$Response(params, context).pipe(
      map((r: StrictHttpResponse<DepartamentoHospital>): DepartamentoHospital => r.body)
    );
  }

  /** Path part for operation `deleteDepartamentoHospital()` */
  static readonly DeleteDepartamentoHospitalPath = '/departamentohospitales/{id}';

  /**
   * DepartamentoHospital a eliminar por ID.
   *
   * Elimina un DepartamentoHospital existente usando su ID.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteDepartamentoHospital()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDepartamentoHospital$Response(params: DeleteDepartamentoHospital$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteDepartamentoHospital(this.http, this.rootUrl, params, context);
  }

  /**
   * DepartamentoHospital a eliminar por ID.
   *
   * Elimina un DepartamentoHospital existente usando su ID.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteDepartamentoHospital$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDepartamentoHospital(params: DeleteDepartamentoHospital$Params, context?: HttpContext): Observable<void> {
    return this.deleteDepartamentoHospital$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAllPaginatedDepartamentoHospital()` */
  static readonly GetAllPaginatedDepartamentoHospitalPath = '/departamentohospitales';

  /**
   * Obtener una lista con paginación de DepartamentoHospital.
   *
   * Devuelve una lista paginada de DepartamentoHospital
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllPaginatedDepartamentoHospital()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPaginatedDepartamentoHospital$Response(params?: GetAllPaginatedDepartamentoHospital$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseDtoDepartamentoHospital>> {
    return getAllPaginatedDepartamentoHospital(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener una lista con paginación de DepartamentoHospital.
   *
   * Devuelve una lista paginada de DepartamentoHospital
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllPaginatedDepartamentoHospital$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllPaginatedDepartamentoHospital(params?: GetAllPaginatedDepartamentoHospital$Params, context?: HttpContext): Observable<PageResponseDtoDepartamentoHospital> {
    return this.getAllPaginatedDepartamentoHospital$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseDtoDepartamentoHospital>): PageResponseDtoDepartamentoHospital => r.body)
    );
  }

  /** Path part for operation `createDepartamentoHospital()` */
  static readonly CreateDepartamentoHospitalPath = '/departamentohospitales';

  /**
   * Crear un departamentoHospital.
   *
   * Crea un nuevo departamentoHospital usando los datos proporcionados en el cuerpo de la solicitud.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createDepartamentoHospital()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createDepartamentoHospital$Response(params: CreateDepartamentoHospital$Params, context?: HttpContext): Observable<StrictHttpResponse<DepartamentoHospital>> {
    return createDepartamentoHospital(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear un departamentoHospital.
   *
   * Crea un nuevo departamentoHospital usando los datos proporcionados en el cuerpo de la solicitud.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createDepartamentoHospital$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createDepartamentoHospital(params: CreateDepartamentoHospital$Params, context?: HttpContext): Observable<DepartamentoHospital> {
    return this.createDepartamentoHospital$Response(params, context).pipe(
      map((r: StrictHttpResponse<DepartamentoHospital>): DepartamentoHospital => r.body)
    );
  }

  /** Path part for operation `getAllDepartamentoHospital()` */
  static readonly GetAllDepartamentoHospitalPath = '/departamentohospitales/all';

  /**
   * Obtener todos los DepartamentoHospital.
   *
   * Devuelve la lista completa de DepartamentoHospital
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllDepartamentoHospital()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDepartamentoHospital$Response(params?: GetAllDepartamentoHospital$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<DepartamentoHospital>>> {
    return getAllDepartamentoHospital(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener todos los DepartamentoHospital.
   *
   * Devuelve la lista completa de DepartamentoHospital
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllDepartamentoHospital$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDepartamentoHospital(params?: GetAllDepartamentoHospital$Params, context?: HttpContext): Observable<Array<DepartamentoHospital>> {
    return this.getAllDepartamentoHospital$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<DepartamentoHospital>>): Array<DepartamentoHospital> => r.body)
    );
  }

}

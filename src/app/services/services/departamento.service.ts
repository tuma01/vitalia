/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createDepartamento } from '../fn/departamento/create-departamento';
import { CreateDepartamento$Params } from '../fn/departamento/create-departamento';
import { deleteDepartamento } from '../fn/departamento/delete-departamento';
import { DeleteDepartamento$Params } from '../fn/departamento/delete-departamento';
import { Departamento } from '../models/departamento';
import { getAllDepartamentos } from '../fn/departamento/get-all-departamentos';
import { GetAllDepartamentos$Params } from '../fn/departamento/get-all-departamentos';
import { getDepartamentoById } from '../fn/departamento/get-departamento-by-id';
import { GetDepartamentoById$Params } from '../fn/departamento/get-departamento-by-id';
import { getPaginatedDepartamentos } from '../fn/departamento/get-paginated-departamentos';
import { GetPaginatedDepartamentos$Params } from '../fn/departamento/get-paginated-departamentos';
import { PageResponseDtoDepartamento } from '../models/page-response-dto-departamento';
import { updateDepartamento } from '../fn/departamento/update-departamento';
import { UpdateDepartamento$Params } from '../fn/departamento/update-departamento';


/**
 * REST API para gestionar detalles de departamentos: crear, actualizar, obtener y eliminar.
 */
@Injectable({ providedIn: 'root' })
export class DepartamentoService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getDepartamentoById()` */
  static readonly GetDepartamentoByIdPath = '/departamentos/{id}';

  /**
   * Obtener un departamento por ID.
   *
   * Devuelve un objeto Departamento por ID especificado.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDepartamentoById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDepartamentoById$Response(params: GetDepartamentoById$Params, context?: HttpContext): Observable<StrictHttpResponse<Departamento>> {
    return getDepartamentoById(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener un departamento por ID.
   *
   * Devuelve un objeto Departamento por ID especificado.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDepartamentoById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDepartamentoById(params: GetDepartamentoById$Params, context?: HttpContext): Observable<Departamento> {
    return this.getDepartamentoById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Departamento>): Departamento => r.body)
    );
  }

  /** Path part for operation `updateDepartamento()` */
  static readonly UpdateDepartamentoPath = '/departamentos/{id}';

  /**
   * Actualizar un departamento por ID.
   *
   * Actualiza un departamento existente usando su ID y los datos proporcionados.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateDepartamento()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDepartamento$Response(params: UpdateDepartamento$Params, context?: HttpContext): Observable<StrictHttpResponse<Departamento>> {
    return updateDepartamento(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar un departamento por ID.
   *
   * Actualiza un departamento existente usando su ID y los datos proporcionados.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateDepartamento$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateDepartamento(params: UpdateDepartamento$Params, context?: HttpContext): Observable<Departamento> {
    return this.updateDepartamento$Response(params, context).pipe(
      map((r: StrictHttpResponse<Departamento>): Departamento => r.body)
    );
  }

  /** Path part for operation `deleteDepartamento()` */
  static readonly DeleteDepartamentoPath = '/departamentos/{id}';

  /**
   * Eliminar un departamento por ID.
   *
   * Elimina un departamento existente usando su ID.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteDepartamento()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDepartamento$Response(params: DeleteDepartamento$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteDepartamento(this.http, this.rootUrl, params, context);
  }

  /**
   * Eliminar un departamento por ID.
   *
   * Elimina un departamento existente usando su ID.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteDepartamento$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteDepartamento(params: DeleteDepartamento$Params, context?: HttpContext): Observable<void> {
    return this.deleteDepartamento$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getPaginatedDepartamentos()` */
  static readonly GetPaginatedDepartamentosPath = '/departamentos';

  /**
   * Obtener departamentos con paginación.
   *
   * Devuelve una lista de departamentos paginada.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPaginatedDepartamentos()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaginatedDepartamentos$Response(params?: GetPaginatedDepartamentos$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseDtoDepartamento>> {
    return getPaginatedDepartamentos(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener departamentos con paginación.
   *
   * Devuelve una lista de departamentos paginada.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPaginatedDepartamentos$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaginatedDepartamentos(params?: GetPaginatedDepartamentos$Params, context?: HttpContext): Observable<PageResponseDtoDepartamento> {
    return this.getPaginatedDepartamentos$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseDtoDepartamento>): PageResponseDtoDepartamento => r.body)
    );
  }

  /** Path part for operation `createDepartamento()` */
  static readonly CreateDepartamentoPath = '/departamentos';

  /**
   * Crear un departamento.
   *
   * Crea un nuevo departamento usando los datos proporcionados en el cuerpo de la solicitud.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createDepartamento()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createDepartamento$Response(params: CreateDepartamento$Params, context?: HttpContext): Observable<StrictHttpResponse<Departamento>> {
    return createDepartamento(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear un departamento.
   *
   * Crea un nuevo departamento usando los datos proporcionados en el cuerpo de la solicitud.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createDepartamento$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createDepartamento(params: CreateDepartamento$Params, context?: HttpContext): Observable<Departamento> {
    return this.createDepartamento$Response(params, context).pipe(
      map((r: StrictHttpResponse<Departamento>): Departamento => r.body)
    );
  }

  /** Path part for operation `getAllDepartamentos()` */
  static readonly GetAllDepartamentosPath = '/departamentos/all';

  /**
   * Obtener todos los departamentos.
   *
   * Devuelve la lista completa de departamentos.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllDepartamentos()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDepartamentos$Response(params?: GetAllDepartamentos$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Departamento>>> {
    return getAllDepartamentos(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener todos los departamentos.
   *
   * Devuelve la lista completa de departamentos.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllDepartamentos$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllDepartamentos(params?: GetAllDepartamentos$Params, context?: HttpContext): Observable<Array<Departamento>> {
    return this.getAllDepartamentos$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Departamento>>): Array<Departamento> => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createNurseProfessionSpeciality } from '../fn/nurse-profession-speciality/create-nurse-profession-speciality';
import { CreateNurseProfessionSpeciality$Params } from '../fn/nurse-profession-speciality/create-nurse-profession-speciality';
import { deleteNurseProfessionSpeciality } from '../fn/nurse-profession-speciality/delete-nurse-profession-speciality';
import { DeleteNurseProfessionSpeciality$Params } from '../fn/nurse-profession-speciality/delete-nurse-profession-speciality';
import { getAllNurseProfessionSpecialities } from '../fn/nurse-profession-speciality/get-all-nurse-profession-specialities';
import { GetAllNurseProfessionSpecialities$Params } from '../fn/nurse-profession-speciality/get-all-nurse-profession-specialities';
import { getNurseProfessionSpecialityById } from '../fn/nurse-profession-speciality/get-nurse-profession-speciality-by-id';
import { GetNurseProfessionSpecialityById$Params } from '../fn/nurse-profession-speciality/get-nurse-profession-speciality-by-id';
import { getPaginatedNurseProfessionSpecialities } from '../fn/nurse-profession-speciality/get-paginated-nurse-profession-specialities';
import { GetPaginatedNurseProfessionSpecialities$Params } from '../fn/nurse-profession-speciality/get-paginated-nurse-profession-specialities';
import { NurseProfessionSpeciality } from '../models/nurse-profession-speciality';
import { PageResponseDtoNurseProfessionSpeciality } from '../models/page-response-dto-nurse-profession-speciality';
import { updateNurseProfessionSpeciality } from '../fn/nurse-profession-speciality/update-nurse-profession-speciality';
import { UpdateNurseProfessionSpeciality$Params } from '../fn/nurse-profession-speciality/update-nurse-profession-speciality';


/**
 * Rest API Vitalia APP to CREATE, UPDATE, FETCH and DELETE NurseProfessionSpeciality details
 */
@Injectable({ providedIn: 'root' })
export class NurseProfessionSpecialityService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getNurseProfessionSpecialityById()` */
  static readonly GetNurseProfessionSpecialityByIdPath = '/nurseprofessionspecialities/{id}';

  /**
   * Obtener un NurseProfessionSpeciality por ID.
   *
   * Devuelve un objeto NurseProfessionSpeciality por ID especificado.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getNurseProfessionSpecialityById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getNurseProfessionSpecialityById$Response(params: GetNurseProfessionSpecialityById$Params, context?: HttpContext): Observable<StrictHttpResponse<NurseProfessionSpeciality>> {
    return getNurseProfessionSpecialityById(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener un NurseProfessionSpeciality por ID.
   *
   * Devuelve un objeto NurseProfessionSpeciality por ID especificado.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getNurseProfessionSpecialityById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getNurseProfessionSpecialityById(params: GetNurseProfessionSpecialityById$Params, context?: HttpContext): Observable<NurseProfessionSpeciality> {
    return this.getNurseProfessionSpecialityById$Response(params, context).pipe(
      map((r: StrictHttpResponse<NurseProfessionSpeciality>): NurseProfessionSpeciality => r.body)
    );
  }

  /** Path part for operation `updateNurseProfessionSpeciality()` */
  static readonly UpdateNurseProfessionSpecialityPath = '/nurseprofessionspecialities/{id}';

  /**
   * Actualizar un NurseProfessionSpeciality por ID.
   *
   * Actualiza un NurseProfessionSpeciality existente usando su ID y los datos proporcionados.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateNurseProfessionSpeciality()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateNurseProfessionSpeciality$Response(params: UpdateNurseProfessionSpeciality$Params, context?: HttpContext): Observable<StrictHttpResponse<NurseProfessionSpeciality>> {
    return updateNurseProfessionSpeciality(this.http, this.rootUrl, params, context);
  }

  /**
   * Actualizar un NurseProfessionSpeciality por ID.
   *
   * Actualiza un NurseProfessionSpeciality existente usando su ID y los datos proporcionados.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateNurseProfessionSpeciality$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateNurseProfessionSpeciality(params: UpdateNurseProfessionSpeciality$Params, context?: HttpContext): Observable<NurseProfessionSpeciality> {
    return this.updateNurseProfessionSpeciality$Response(params, context).pipe(
      map((r: StrictHttpResponse<NurseProfessionSpeciality>): NurseProfessionSpeciality => r.body)
    );
  }

  /** Path part for operation `deleteNurseProfessionSpeciality()` */
  static readonly DeleteNurseProfessionSpecialityPath = '/nurseprofessionspecialities/{id}';

  /**
   * NurseProfessionSpeciality a eliminar por ID.
   *
   * Elimina un NurseProfessionSpeciality existente usando su ID.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteNurseProfessionSpeciality()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteNurseProfessionSpeciality$Response(params: DeleteNurseProfessionSpeciality$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteNurseProfessionSpeciality(this.http, this.rootUrl, params, context);
  }

  /**
   * NurseProfessionSpeciality a eliminar por ID.
   *
   * Elimina un NurseProfessionSpeciality existente usando su ID.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteNurseProfessionSpeciality$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteNurseProfessionSpeciality(params: DeleteNurseProfessionSpeciality$Params, context?: HttpContext): Observable<void> {
    return this.deleteNurseProfessionSpeciality$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getPaginatedNurseProfessionSpecialities()` */
  static readonly GetPaginatedNurseProfessionSpecialitiesPath = '/nurseprofessionspecialities';

  /**
   * Obtener una lista con paginación de NurseProfessionSpeciality.
   *
   * Devuelve una lista paginada de NurseProfessionSpeciality
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPaginatedNurseProfessionSpecialities()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaginatedNurseProfessionSpecialities$Response(params?: GetPaginatedNurseProfessionSpecialities$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseDtoNurseProfessionSpeciality>> {
    return getPaginatedNurseProfessionSpecialities(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener una lista con paginación de NurseProfessionSpeciality.
   *
   * Devuelve una lista paginada de NurseProfessionSpeciality
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPaginatedNurseProfessionSpecialities$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaginatedNurseProfessionSpecialities(params?: GetPaginatedNurseProfessionSpecialities$Params, context?: HttpContext): Observable<PageResponseDtoNurseProfessionSpeciality> {
    return this.getPaginatedNurseProfessionSpecialities$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseDtoNurseProfessionSpeciality>): PageResponseDtoNurseProfessionSpeciality => r.body)
    );
  }

  /** Path part for operation `createNurseProfessionSpeciality()` */
  static readonly CreateNurseProfessionSpecialityPath = '/nurseprofessionspecialities';

  /**
   * Crear un NurseProfessionSpeciality.
   *
   * Crea un nuevo NurseProfessionSpeciality usando los datos proporcionados en el cuerpo de la solicitud.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createNurseProfessionSpeciality()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createNurseProfessionSpeciality$Response(params: CreateNurseProfessionSpeciality$Params, context?: HttpContext): Observable<StrictHttpResponse<NurseProfessionSpeciality>> {
    return createNurseProfessionSpeciality(this.http, this.rootUrl, params, context);
  }

  /**
   * Crear un NurseProfessionSpeciality.
   *
   * Crea un nuevo NurseProfessionSpeciality usando los datos proporcionados en el cuerpo de la solicitud.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createNurseProfessionSpeciality$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createNurseProfessionSpeciality(params: CreateNurseProfessionSpeciality$Params, context?: HttpContext): Observable<NurseProfessionSpeciality> {
    return this.createNurseProfessionSpeciality$Response(params, context).pipe(
      map((r: StrictHttpResponse<NurseProfessionSpeciality>): NurseProfessionSpeciality => r.body)
    );
  }

  /** Path part for operation `getAllNurseProfessionSpecialities()` */
  static readonly GetAllNurseProfessionSpecialitiesPath = '/nurseprofessionspecialities/all';

  /**
   * Obtener todos los NurseProfessionSpeciality.
   *
   * Devuelve la lista completa de NurseProfessionSpeciality
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllNurseProfessionSpecialities()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllNurseProfessionSpecialities$Response(params?: GetAllNurseProfessionSpecialities$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<NurseProfessionSpeciality>>> {
    return getAllNurseProfessionSpecialities(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener todos los NurseProfessionSpeciality.
   *
   * Devuelve la lista completa de NurseProfessionSpeciality
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllNurseProfessionSpecialities$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllNurseProfessionSpecialities(params?: GetAllNurseProfessionSpecialities$Params, context?: HttpContext): Observable<Array<NurseProfessionSpeciality>> {
    return this.getAllNurseProfessionSpecialities$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<NurseProfessionSpeciality>>): Array<NurseProfessionSpeciality> => r.body)
    );
  }

}

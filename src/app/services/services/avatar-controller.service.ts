/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteAvatar } from '../fn/avatar-controller/delete-avatar';
import { DeleteAvatar$Params } from '../fn/avatar-controller/delete-avatar';
import { getAvatarByEmail } from '../fn/avatar-controller/get-avatar-by-email';
import { GetAvatarByEmail$Params } from '../fn/avatar-controller/get-avatar-by-email';
import { getOwnAvatar } from '../fn/avatar-controller/get-own-avatar';
import { GetOwnAvatar$Params } from '../fn/avatar-controller/get-own-avatar';
import { uploadAvatar } from '../fn/avatar-controller/upload-avatar';
import { UploadAvatar$Params } from '../fn/avatar-controller/upload-avatar';

@Injectable({ providedIn: 'root' })
export class AvatarControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getOwnAvatar()` */
  static readonly GetOwnAvatarPath = '/avatar';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOwnAvatar()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOwnAvatar$Response(params?: GetOwnAvatar$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getOwnAvatar(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOwnAvatar$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOwnAvatar(params?: GetOwnAvatar$Params, context?: HttpContext): Observable<string> {
    return this.getOwnAvatar$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `uploadAvatar()` */
  static readonly UploadAvatarPath = '/avatar';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadAvatar()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadAvatar$Response(params?: UploadAvatar$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return uploadAvatar(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadAvatar$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadAvatar(params?: UploadAvatar$Params, context?: HttpContext): Observable<void> {
    return this.uploadAvatar$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `deleteAvatar()` */
  static readonly DeleteAvatarPath = '/avatar';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAvatar()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAvatar$Response(params?: DeleteAvatar$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAvatar(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAvatar$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAvatar(params?: DeleteAvatar$Params, context?: HttpContext): Observable<void> {
    return this.deleteAvatar$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getAvatarByEmail()` */
  static readonly GetAvatarByEmailPath = '/avatar/email';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAvatarByEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvatarByEmail$Response(params: GetAvatarByEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return getAvatarByEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAvatarByEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAvatarByEmail(params: GetAvatarByEmail$Params, context?: HttpContext): Observable<string> {
    return this.getAvatarByEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}

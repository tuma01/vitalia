/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createNurse } from '../fn/nurse/create-nurse';
import { CreateNurse$Params } from '../fn/nurse/create-nurse';
import { deleteNurse } from '../fn/nurse/delete-nurse';
import { DeleteNurse$Params } from '../fn/nurse/delete-nurse';
import { getAllNurses } from '../fn/nurse/get-all-nurses';
import { GetAllNurses$Params } from '../fn/nurse/get-all-nurses';
import { getNurseById } from '../fn/nurse/get-nurse-by-id';
import { GetNurseById$Params } from '../fn/nurse/get-nurse-by-id';
import { getPaginatedNurses } from '../fn/nurse/get-paginated-nurses';
import { GetPaginatedNurses$Params } from '../fn/nurse/get-paginated-nurses';
import { Nurse } from '../models/nurse';
import { PageResponseDtoNurse } from '../models/page-response-dto-nurse';
import { updateNurse } from '../fn/nurse/update-nurse';
import { UpdateNurse$Params } from '../fn/nurse/update-nurse';


/**
 * Rest API Hospital APP to CREATE, UPDATE, FETCH and DELETE Nurse details
 */
@Injectable({ providedIn: 'root' })
export class NurseService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getNurseById()` */
  static readonly GetNurseByIdPath = '/nurses/{id}';

  /**
   * Nurse a obtener por ID.
   *
   * Devuelve un objeto Nurse por ID especificado.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getNurseById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getNurseById$Response(params: GetNurseById$Params, context?: HttpContext): Observable<StrictHttpResponse<Nurse>> {
    return getNurseById(this.http, this.rootUrl, params, context);
  }

  /**
   * Nurse a obtener por ID.
   *
   * Devuelve un objeto Nurse por ID especificado.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getNurseById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getNurseById(params: GetNurseById$Params, context?: HttpContext): Observable<Nurse> {
    return this.getNurseById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Nurse>): Nurse => r.body)
    );
  }

  /** Path part for operation `updateNurse()` */
  static readonly UpdateNursePath = '/nurses/{id}';

  /**
   * Nurse a actualizar mediante el ID.
   *
   * Actualiza Nurse existente usando su ID y los datos proporcionados.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateNurse()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateNurse$Response(params: UpdateNurse$Params, context?: HttpContext): Observable<StrictHttpResponse<Nurse>> {
    return updateNurse(this.http, this.rootUrl, params, context);
  }

  /**
   * Nurse a actualizar mediante el ID.
   *
   * Actualiza Nurse existente usando su ID y los datos proporcionados.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateNurse$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateNurse(params: UpdateNurse$Params, context?: HttpContext): Observable<Nurse> {
    return this.updateNurse$Response(params, context).pipe(
      map((r: StrictHttpResponse<Nurse>): Nurse => r.body)
    );
  }

  /** Path part for operation `deleteNurse()` */
  static readonly DeleteNursePath = '/nurses/{id}';

  /**
   * Nurse a eliminar por ID.
   *
   * Elimina un Nurse existente usando su ID.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteNurse()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteNurse$Response(params: DeleteNurse$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteNurse(this.http, this.rootUrl, params, context);
  }

  /**
   * Nurse a eliminar por ID.
   *
   * Elimina un Nurse existente usando su ID.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteNurse$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteNurse(params: DeleteNurse$Params, context?: HttpContext): Observable<void> {
    return this.deleteNurse$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getPaginatedNurses()` */
  static readonly GetPaginatedNursesPath = '/nurses';

  /**
   * Obtener una lista con paginación de Nurse.
   *
   * Devuelve una lista paginada de Nurse
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPaginatedNurses()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaginatedNurses$Response(params?: GetPaginatedNurses$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseDtoNurse>> {
    return getPaginatedNurses(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener una lista con paginación de Nurse.
   *
   * Devuelve una lista paginada de Nurse
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPaginatedNurses$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPaginatedNurses(params?: GetPaginatedNurses$Params, context?: HttpContext): Observable<PageResponseDtoNurse> {
    return this.getPaginatedNurses$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseDtoNurse>): PageResponseDtoNurse => r.body)
    );
  }

  /** Path part for operation `createNurse()` */
  static readonly CreateNursePath = '/nurses';

  /**
   * Nurse a crear.
   *
   * Crea un nuevo Nurse usando los datos proporcionados en el cuerpo de la solicitud.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createNurse()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createNurse$Response(params: CreateNurse$Params, context?: HttpContext): Observable<StrictHttpResponse<Nurse>> {
    return createNurse(this.http, this.rootUrl, params, context);
  }

  /**
   * Nurse a crear.
   *
   * Crea un nuevo Nurse usando los datos proporcionados en el cuerpo de la solicitud.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createNurse$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createNurse(params: CreateNurse$Params, context?: HttpContext): Observable<Nurse> {
    return this.createNurse$Response(params, context).pipe(
      map((r: StrictHttpResponse<Nurse>): Nurse => r.body)
    );
  }

  /** Path part for operation `getAllNurses()` */
  static readonly GetAllNursesPath = '/nurses/all';

  /**
   * Obtener todos los Nurse.
   *
   * Devuelve la lista completa de Nurse
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllNurses()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllNurses$Response(params?: GetAllNurses$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Nurse>>> {
    return getAllNurses(this.http, this.rootUrl, params, context);
  }

  /**
   * Obtener todos los Nurse.
   *
   * Devuelve la lista completa de Nurse
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllNurses$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllNurses(params?: GetAllNurses$Params, context?: HttpContext): Observable<Array<Nurse>> {
    return this.getAllNurses$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Nurse>>): Array<Nurse> => r.body)
    );
  }

}
